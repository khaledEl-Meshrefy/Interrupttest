
Interrupttest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009da  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ff  00000000  00000000  00000d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f1  00000000  00000000  00001315  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001808  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ea  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000232  00000000  00000000  00001da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_3>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  7a:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <INT0_init>:
		break;
		
		case  LowlevelMode:
		break;
	}
	GICR |= (1<<INT1);/* Int0 enable*/
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	91 05       	cpc	r25, r1
  86:	71 f0       	breq	.+28     	; 0xa4 <INT0_init+0x22>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	91 05       	cpc	r25, r1
  8c:	19 f0       	breq	.+6      	; 0x94 <INT0_init+0x12>
  8e:	89 2b       	or	r24, r25
  90:	61 f4       	brne	.+24     	; 0xaa <INT0_init+0x28>
  92:	04 c0       	rjmp	.+8      	; 0x9c <INT0_init+0x1a>
  94:	85 b7       	in	r24, 0x35	; 53
  96:	81 60       	ori	r24, 0x01	; 1
  98:	85 bf       	out	0x35, r24	; 53
  9a:	07 c0       	rjmp	.+14     	; 0xaa <INT0_init+0x28>
  9c:	85 b7       	in	r24, 0x35	; 53
  9e:	83 60       	ori	r24, 0x03	; 3
  a0:	85 bf       	out	0x35, r24	; 53
  a2:	03 c0       	rjmp	.+6      	; 0xaa <INT0_init+0x28>
  a4:	85 b7       	in	r24, 0x35	; 53
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	85 bf       	out	0x35, r24	; 53
  aa:	8b b7       	in	r24, 0x3b	; 59
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	8b bf       	out	0x3b, r24	; 59
  b0:	08 95       	ret

000000b2 <INT2_init>:



}
void INT2_init(int mode){
	switch(mode){
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	19 f0       	breq	.+6      	; 0xbc <INT2_init+0xa>
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	29 f0       	breq	.+10     	; 0xc4 <INT2_init+0x12>
  ba:	07 c0       	rjmp	.+14     	; 0xca <INT2_init+0x18>

		
		case RisingMode :
		MCUCSR |= (1<<ISC2);  // Rising
  bc:	84 b7       	in	r24, 0x34	; 52
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	84 bf       	out	0x34, r24	; 52
		break;
  c2:	03 c0       	rjmp	.+6      	; 0xca <INT2_init+0x18>
		
		case FallingMode :
		MCUCSR &=~(1<<ISC2) ;  // Falling
  c4:	84 b7       	in	r24, 0x34	; 52
  c6:	8f 7b       	andi	r24, 0xBF	; 191
  c8:	84 bf       	out	0x34, r24	; 52
		break;
		
		
	}
	GICR |= (1<<INT2);/* Int2 enable*/
  ca:	8b b7       	in	r24, 0x3b	; 59
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	8b bf       	out	0x3b, r24	; 59
  d0:	08 95       	ret

000000d2 <__vector_1>:
#define  F_CPU 16000000UL
#include <util/delay.h>
#include "functions.h"
#include <avr/interrupt.h>

ISR(INT0_vect){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
	static int rising=1;
	if (rising==1){
  e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <rising.1973>
  e4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <rising.1973+0x1>
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	39 f4       	brne	.+14     	; 0xfa <__vector_1+0x28>
		PORTA=0x05;
  ec:	85 e0       	ldi	r24, 0x05	; 5
  ee:	8b bb       	out	0x1b, r24	; 27
		rising=0;
  f0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <rising.1973+0x1>
  f4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <rising.1973>
  f8:	07 c0       	rjmp	.+14     	; 0x108 <__vector_1+0x36>
		} else{
		PORTA=0x00;
  fa:	1b ba       	out	0x1b, r1	; 27
		rising=1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <rising.1973+0x1>
 104:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <rising.1973>
	}
}
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_3>:

ISR(INT2_vect){
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	static int rising=1;
	if (rising==1){
 124:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 128:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	39 f4       	brne	.+14     	; 0x13e <__vector_3+0x28>
		PORTA=0x07;
 130:	87 e0       	ldi	r24, 0x07	; 7
 132:	8b bb       	out	0x1b, r24	; 27
		rising=0;
 134:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 138:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 13c:	07 c0       	rjmp	.+14     	; 0x14c <__vector_3+0x36>
		} else{
		PORTA=0x00;
 13e:	1b ba       	out	0x1b, r1	; 27
		rising=1;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 148:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <main>:


int main(void)
{
	DDRA=0XFF;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	8a bb       	out	0x1a, r24	; 26
		
	INT0_init(AnylogicalMode);
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 41 00 	call	0x82	; 0x82 <INT0_init>
	INT2_init(RisingMode);
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 59 00 	call	0xb2	; 0xb2 <INT2_init>
	/* General interrupt enable*/
	sei();
 16e:	78 94       	sei
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0x16>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
